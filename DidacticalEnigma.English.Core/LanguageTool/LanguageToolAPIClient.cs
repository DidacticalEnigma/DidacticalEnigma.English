// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using DidacticalEnigma.English.LanguageTool.Models;

namespace DidacticalEnigma.English.LanguageTool
{
    /// <summary> The LanguageToolAPI service client. </summary>
    public partial class LanguageToolAPIClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal LanguageToolAPIRestClient RestClient { get; }

        /// <summary> Initializes a new instance of LanguageToolAPIClient for mocking. </summary>
        protected LanguageToolAPIClient()
        {
        }

        /// <summary> Initializes a new instance of LanguageToolAPIClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal LanguageToolAPIClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new LanguageToolAPIRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> The main feature - check a text with LanguageTool for possible style and grammar issues. </summary>
        /// <param name="language"> A language code like `en-US`, `de-DE`, `fr`, or `auto` to guess the language automatically (see `preferredVariants` below). For languages with variants (English, German, Portuguese) spell checking will only be activated when you specify the variant, e.g. `en-GB` instead of just `en`. </param>
        /// <param name="text"> The text to be checked. This or &apos;data&apos; is required. </param>
        /// <param name="data">
        /// The text to be checked, given as a JSON document that specifies what&apos;s text and what&apos;s markup. This or &apos;text&apos; is required. Markup will be ignored when looking for errors. Example text: &lt;pre&gt;A &amp;lt;b&gt;test&amp;lt;/b&gt;&lt;/pre&gt;JSON for the example text: &lt;pre&gt;{&quot;annotation&quot;:[
        ///  {&quot;text&quot;: &quot;A &quot;},
        ///  {&quot;markup&quot;: &quot;&amp;lt;b&gt;&quot;},
        ///  {&quot;text&quot;: &quot;test&quot;},
        ///  {&quot;markup&quot;: &quot;&amp;lt;/b&gt;&quot;}
        /// ]}&lt;/pre&gt; &lt;p&gt;If you have markup that should be interpreted as whitespace, like &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt; in HTML, you can have it interpreted like this: &lt;pre&gt;{&quot;markup&quot;: &quot;&amp;lt;p&amp;gt;&quot;, &quot;interpretAs&quot;: &quot;\n\n&quot;}&lt;/pre&gt;&lt;p&gt;The &apos;data&apos; feature is not limited to HTML or XML, it can be used for any kind of markup. Entities will need to be expanded in this input.
        /// </param>
        /// <param name="username"> Set to get Premium API access: Your username/email as used to log in at languagetool.org. </param>
        /// <param name="apiKey"> Set to get Premium API access: &lt;a target=&apos;_blank&apos; href=&apos;https://languagetool.org/editor/settings/api&apos;&gt;your API key&lt;/a&gt;. </param>
        /// <param name="dicts"> Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset. </param>
        /// <param name="motherTongue"> A language code of the user&apos;s native language, enabling false friends checks for some language pairs. </param>
        /// <param name="preferredVariants"> Comma-separated list of preferred language variants. The language detector used with `language=auto` can detect e.g. English, but it cannot decide whether British English or American English is used. Thus this parameter can be used to specify the preferred variants like `en-GB` and `de-AT`. Only available with `language=auto`. You should set variants for at least German and English, as otherwise the spell checking will not work for those, as no spelling dictionary can be selected for just `en` or `de`. </param>
        /// <param name="enabledRules"> IDs of rules to be enabled, comma-separated. </param>
        /// <param name="disabledRules"> IDs of rules to be disabled, comma-separated. </param>
        /// <param name="enabledCategories"> IDs of categories to be enabled, comma-separated. </param>
        /// <param name="disabledCategories"> IDs of categories to be disabled, comma-separated. </param>
        /// <param name="enabledOnly"> If true, only the rules and categories whose IDs are specified with `enabledRules` or `enabledCategories` are enabled. </param>
        /// <param name="level"> If set to `picky`, additional rules will be activated, i.e. rules that you might only find useful when checking formal text. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PathsWm9F5YCheckPostResponses200ContentApplicationJsonSchema>> CheckAsync(string language, string text = null, string data = null, string username = null, string apiKey = null, string dicts = null, string motherTongue = null, string preferredVariants = null, string enabledRules = null, string disabledRules = null, string enabledCategories = null, string disabledCategories = null, bool? enabledOnly = null, PostContentSchemaLevel? level = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LanguageToolAPIClient.Check");
            scope.Start();
            try
            {
                return await RestClient.CheckAsync(language, text, data, username, apiKey, dicts, motherTongue, preferredVariants, enabledRules, disabledRules, enabledCategories, disabledCategories, enabledOnly, level, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The main feature - check a text with LanguageTool for possible style and grammar issues. </summary>
        /// <param name="language"> A language code like `en-US`, `de-DE`, `fr`, or `auto` to guess the language automatically (see `preferredVariants` below). For languages with variants (English, German, Portuguese) spell checking will only be activated when you specify the variant, e.g. `en-GB` instead of just `en`. </param>
        /// <param name="text"> The text to be checked. This or &apos;data&apos; is required. </param>
        /// <param name="data">
        /// The text to be checked, given as a JSON document that specifies what&apos;s text and what&apos;s markup. This or &apos;text&apos; is required. Markup will be ignored when looking for errors. Example text: &lt;pre&gt;A &amp;lt;b&gt;test&amp;lt;/b&gt;&lt;/pre&gt;JSON for the example text: &lt;pre&gt;{&quot;annotation&quot;:[
        ///  {&quot;text&quot;: &quot;A &quot;},
        ///  {&quot;markup&quot;: &quot;&amp;lt;b&gt;&quot;},
        ///  {&quot;text&quot;: &quot;test&quot;},
        ///  {&quot;markup&quot;: &quot;&amp;lt;/b&gt;&quot;}
        /// ]}&lt;/pre&gt; &lt;p&gt;If you have markup that should be interpreted as whitespace, like &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt; in HTML, you can have it interpreted like this: &lt;pre&gt;{&quot;markup&quot;: &quot;&amp;lt;p&amp;gt;&quot;, &quot;interpretAs&quot;: &quot;\n\n&quot;}&lt;/pre&gt;&lt;p&gt;The &apos;data&apos; feature is not limited to HTML or XML, it can be used for any kind of markup. Entities will need to be expanded in this input.
        /// </param>
        /// <param name="username"> Set to get Premium API access: Your username/email as used to log in at languagetool.org. </param>
        /// <param name="apiKey"> Set to get Premium API access: &lt;a target=&apos;_blank&apos; href=&apos;https://languagetool.org/editor/settings/api&apos;&gt;your API key&lt;/a&gt;. </param>
        /// <param name="dicts"> Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset. </param>
        /// <param name="motherTongue"> A language code of the user&apos;s native language, enabling false friends checks for some language pairs. </param>
        /// <param name="preferredVariants"> Comma-separated list of preferred language variants. The language detector used with `language=auto` can detect e.g. English, but it cannot decide whether British English or American English is used. Thus this parameter can be used to specify the preferred variants like `en-GB` and `de-AT`. Only available with `language=auto`. You should set variants for at least German and English, as otherwise the spell checking will not work for those, as no spelling dictionary can be selected for just `en` or `de`. </param>
        /// <param name="enabledRules"> IDs of rules to be enabled, comma-separated. </param>
        /// <param name="disabledRules"> IDs of rules to be disabled, comma-separated. </param>
        /// <param name="enabledCategories"> IDs of categories to be enabled, comma-separated. </param>
        /// <param name="disabledCategories"> IDs of categories to be disabled, comma-separated. </param>
        /// <param name="enabledOnly"> If true, only the rules and categories whose IDs are specified with `enabledRules` or `enabledCategories` are enabled. </param>
        /// <param name="level"> If set to `picky`, additional rules will be activated, i.e. rules that you might only find useful when checking formal text. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PathsWm9F5YCheckPostResponses200ContentApplicationJsonSchema> Check(string language, string text = null, string data = null, string username = null, string apiKey = null, string dicts = null, string motherTongue = null, string preferredVariants = null, string enabledRules = null, string disabledRules = null, string enabledCategories = null, string disabledCategories = null, bool? enabledOnly = null, PostContentSchemaLevel? level = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LanguageToolAPIClient.Check");
            scope.Start();
            try
            {
                return RestClient.Check(language, text, data, username, apiKey, dicts, motherTongue, preferredVariants, enabledRules, disabledRules, enabledCategories, disabledCategories, enabledOnly, level, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a list of supported languages. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<Get200ApplicationJsonItemsItem>>> GetLanguagesAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LanguageToolAPIClient.GetLanguages");
            scope.Start();
            try
            {
                return await RestClient.GetLanguagesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a list of supported languages. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<Get200ApplicationJsonItemsItem>> GetLanguages(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LanguageToolAPIClient.GetLanguages");
            scope.Start();
            try
            {
                return RestClient.GetLanguages(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List words in the user&apos;s personal dictionaries. </summary>
        /// <param name="username"> Your username as used to log in at languagetool.org. </param>
        /// <param name="apiKey"> &lt;a target=&apos;_blank&apos; href=&apos;https://languagetool.org/editor/settings/api&apos;&gt;Your API key&lt;/a&gt;. </param>
        /// <param name="offset"> Offset of where to start in the list of words. Defaults to 0. </param>
        /// <param name="limit"> Maximum number of words to return. Defaults to 10. </param>
        /// <param name="dicts"> Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Paths19M51AqWordsGetResponses200ContentApplicationJsonSchema>> GetUserDictionaryWordsAsync(string username, string apiKey, int? offset = null, int? limit = null, string dicts = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LanguageToolAPIClient.GetUserDictionaryWords");
            scope.Start();
            try
            {
                return await RestClient.GetUserDictionaryWordsAsync(username, apiKey, offset, limit, dicts, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List words in the user&apos;s personal dictionaries. </summary>
        /// <param name="username"> Your username as used to log in at languagetool.org. </param>
        /// <param name="apiKey"> &lt;a target=&apos;_blank&apos; href=&apos;https://languagetool.org/editor/settings/api&apos;&gt;Your API key&lt;/a&gt;. </param>
        /// <param name="offset"> Offset of where to start in the list of words. Defaults to 0. </param>
        /// <param name="limit"> Maximum number of words to return. Defaults to 10. </param>
        /// <param name="dicts"> Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Paths19M51AqWordsGetResponses200ContentApplicationJsonSchema> GetUserDictionaryWords(string username, string apiKey, int? offset = null, int? limit = null, string dicts = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LanguageToolAPIClient.GetUserDictionaryWords");
            scope.Start();
            try
            {
                return RestClient.GetUserDictionaryWords(username, apiKey, offset, limit, dicts, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a word to one of the user&apos;s personal dictionaries. Please note that this feature is considered to be used for personal dictionaries which must not contain more than 500 words. If this is an issue for you, please contact us. </summary>
        /// <param name="word"> The word to be added. Must not be a phrase, i.e. cannot contain white space. The word is added to a global dictionary that applies to all languages. </param>
        /// <param name="username"> Your username as used to log in at languagetool.org. </param>
        /// <param name="apiKey"> &lt;a target=&apos;_blank&apos; href=&apos;https://languagetool.org/editor/settings/api&apos;&gt;Your API key&lt;/a&gt;. </param>
        /// <param name="dict"> Name of the dictionary to add the word to; non-existent dictionaries are created after calling this; if unset, adds to special default dictionary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PathsJ3J268WordsAddPostResponses200ContentApplicationJsonSchema>> AddUserDictionaryWordAsync(string word, string username, string apiKey, string dict = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LanguageToolAPIClient.AddUserDictionaryWord");
            scope.Start();
            try
            {
                return await RestClient.AddUserDictionaryWordAsync(word, username, apiKey, dict, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a word to one of the user&apos;s personal dictionaries. Please note that this feature is considered to be used for personal dictionaries which must not contain more than 500 words. If this is an issue for you, please contact us. </summary>
        /// <param name="word"> The word to be added. Must not be a phrase, i.e. cannot contain white space. The word is added to a global dictionary that applies to all languages. </param>
        /// <param name="username"> Your username as used to log in at languagetool.org. </param>
        /// <param name="apiKey"> &lt;a target=&apos;_blank&apos; href=&apos;https://languagetool.org/editor/settings/api&apos;&gt;Your API key&lt;/a&gt;. </param>
        /// <param name="dict"> Name of the dictionary to add the word to; non-existent dictionaries are created after calling this; if unset, adds to special default dictionary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PathsJ3J268WordsAddPostResponses200ContentApplicationJsonSchema> AddUserDictionaryWord(string word, string username, string apiKey, string dict = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LanguageToolAPIClient.AddUserDictionaryWord");
            scope.Start();
            try
            {
                return RestClient.AddUserDictionaryWord(word, username, apiKey, dict, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a word from one of the user&apos;s personal dictionaries. </summary>
        /// <param name="word"> The word to be removed. </param>
        /// <param name="username"> Your username as used to log in at languagetool.org. </param>
        /// <param name="apiKey"> &lt;a target=&apos;_blank&apos; href=&apos;https://languagetool.org/editor/settings/api&apos;&gt;Your API key&lt;/a&gt;. </param>
        /// <param name="dict"> Name of the dictionary to remove the word from; if the dictionary is empty upon calling this, it is deleted; if unset, removes from special default dictionary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PathsWjwd9LWordsDeletePostResponses200ContentApplicationJsonSchema>> RemoveUserDictionaryWordAsync(string word, string username, string apiKey, string dict = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LanguageToolAPIClient.RemoveUserDictionaryWord");
            scope.Start();
            try
            {
                return await RestClient.RemoveUserDictionaryWordAsync(word, username, apiKey, dict, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a word from one of the user&apos;s personal dictionaries. </summary>
        /// <param name="word"> The word to be removed. </param>
        /// <param name="username"> Your username as used to log in at languagetool.org. </param>
        /// <param name="apiKey"> &lt;a target=&apos;_blank&apos; href=&apos;https://languagetool.org/editor/settings/api&apos;&gt;Your API key&lt;/a&gt;. </param>
        /// <param name="dict"> Name of the dictionary to remove the word from; if the dictionary is empty upon calling this, it is deleted; if unset, removes from special default dictionary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PathsWjwd9LWordsDeletePostResponses200ContentApplicationJsonSchema> RemoveUserDictionaryWord(string word, string username, string apiKey, string dict = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LanguageToolAPIClient.RemoveUserDictionaryWord");
            scope.Start();
            try
            {
                return RestClient.RemoveUserDictionaryWord(word, username, apiKey, dict, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
