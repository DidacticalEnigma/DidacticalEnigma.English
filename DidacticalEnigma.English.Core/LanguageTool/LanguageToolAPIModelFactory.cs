// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace DidacticalEnigma.English.LanguageTool.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class LanguageToolAPIModelFactory
    {
        /// <summary> Initializes a new instance of PathsWm9F5YCheckPostResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="software"></param>
        /// <param name="language"> The language used for checking the text. </param>
        /// <param name="matches"></param>
        /// <returns> A new <see cref="Models.PathsWm9F5YCheckPostResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsWm9F5YCheckPostResponses200ContentApplicationJsonSchema PathsWm9F5YCheckPostResponses200ContentApplicationJsonSchema(Post200ApplicationJsonProperties software = null, PathsBppw8BCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguage language = null, IEnumerable<Post200ApplicationJsonPropertiesItemsItem> matches = null)
        {
            matches ??= new List<Post200ApplicationJsonPropertiesItemsItem>();

            return new PathsWm9F5YCheckPostResponses200ContentApplicationJsonSchema(software, language, matches?.ToList());
        }

        /// <summary> Initializes a new instance of Post200ApplicationJsonProperties. </summary>
        /// <param name="name"> Usually &apos;LanguageTool&apos;. </param>
        /// <param name="version"> A version string like &apos;3.3&apos; or &apos;3.4-SNAPSHOT&apos;. </param>
        /// <param name="buildDate"> Date when the software was built, e.g. &apos;2016-05-25&apos;. </param>
        /// <param name="apiVersion"> Version of this API response. We don&apos;t expect to make incompatible changes, so this can also be increased for newly added fields. </param>
        /// <param name="status"> An optional warning, e.g. when the API format is not stable. </param>
        /// <param name="premium"> true if you&apos;re using a Premium account with all the premium text checks (since LanguageTool 4.2). </param>
        /// <returns> A new <see cref="Models.Post200ApplicationJsonProperties"/> instance for mocking. </returns>
        public static Post200ApplicationJsonProperties Post200ApplicationJsonProperties(string name = null, string version = null, string buildDate = null, int apiVersion = default, string status = null, bool? premium = null)
        {
            return new Post200ApplicationJsonProperties(name, version, buildDate, apiVersion, status, premium);
        }

        /// <summary> Initializes a new instance of PathsBppw8BCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguage. </summary>
        /// <param name="name"> Language name like &apos;French&apos; or &apos;English (US)&apos;. </param>
        /// <param name="code"> ISO 639-1 code like &apos;en&apos;, &apos;en-US&apos;, or &apos;ca-ES-valencia&apos;. </param>
        /// <param name="detectedLanguage"> The automatically detected text language (might be different from the language actually used for checking). </param>
        /// <returns> A new <see cref="Models.PathsBppw8BCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguage"/> instance for mocking. </returns>
        public static PathsBppw8BCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguage PathsBppw8BCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguage(string name = null, string code = null, Paths9LjlvoCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguagePropertiesDetectedlanguage detectedLanguage = null)
        {
            return new PathsBppw8BCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguage(name, code, detectedLanguage);
        }

        /// <summary> Initializes a new instance of Paths9LjlvoCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguagePropertiesDetectedlanguage. </summary>
        /// <param name="name"> Language name like &apos;French&apos; or &apos;English (US)&apos;. </param>
        /// <param name="code"> ISO 639-1 code like &apos;en&apos;, &apos;en-US&apos;, or &apos;ca-ES-valencia&apos;. </param>
        /// <returns> A new <see cref="Models.Paths9LjlvoCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguagePropertiesDetectedlanguage"/> instance for mocking. </returns>
        public static Paths9LjlvoCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguagePropertiesDetectedlanguage Paths9LjlvoCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguagePropertiesDetectedlanguage(string name = null, string code = null)
        {
            return new Paths9LjlvoCheckPostResponses200ContentApplicationJsonSchemaPropertiesLanguagePropertiesDetectedlanguage(name, code);
        }

        /// <summary> Initializes a new instance of Post200ApplicationJsonPropertiesItemsItem. </summary>
        /// <param name="message"> Message about the error displayed to the user. </param>
        /// <param name="shortMessage"> An optional shorter version of &apos;message&apos;. </param>
        /// <param name="offset"> The 0-based character offset of the error in the text. </param>
        /// <param name="length"> The length of the error in characters. </param>
        /// <param name="replacements"> Replacements that might correct the error. The array can be empty, in this case there is no suggested replacement. </param>
        /// <param name="context"></param>
        /// <param name="sentence"> The sentence the error occurred in (since LanguageTool 4.0 or later). </param>
        /// <param name="rule"></param>
        /// <returns> A new <see cref="Models.Post200ApplicationJsonPropertiesItemsItem"/> instance for mocking. </returns>
        public static Post200ApplicationJsonPropertiesItemsItem Post200ApplicationJsonPropertiesItemsItem(string message = null, string shortMessage = null, int offset = default, int length = default, IEnumerable<Post200ApplicationJsonPropertiesItemsReplacementsItem> replacements = null, PostResponses200ContentApplicationJsonSchemaMatchesItemContext context = null, string sentence = null, PostResponses200ContentApplicationJsonSchemaMatchesItemRule rule = null)
        {
            replacements ??= new List<Post200ApplicationJsonPropertiesItemsReplacementsItem>();

            return new Post200ApplicationJsonPropertiesItemsItem(message, shortMessage, offset, length, replacements?.ToList(), context, sentence, rule);
        }

        /// <summary> Initializes a new instance of Post200ApplicationJsonPropertiesItemsReplacementsItem. </summary>
        /// <param name="value"> the replacement string. </param>
        /// <returns> A new <see cref="Models.Post200ApplicationJsonPropertiesItemsReplacementsItem"/> instance for mocking. </returns>
        public static Post200ApplicationJsonPropertiesItemsReplacementsItem Post200ApplicationJsonPropertiesItemsReplacementsItem(string value = null)
        {
            return new Post200ApplicationJsonPropertiesItemsReplacementsItem(value);
        }

        /// <summary> Initializes a new instance of PostResponses200ContentApplicationJsonSchemaMatchesItemContext. </summary>
        /// <param name="text"> Context of the error, i.e. the error and some text to the left and to the left. </param>
        /// <param name="offset"> The 0-based character offset of the error in the context text. </param>
        /// <param name="length"> The length of the error in characters in the context. </param>
        /// <returns> A new <see cref="Models.PostResponses200ContentApplicationJsonSchemaMatchesItemContext"/> instance for mocking. </returns>
        public static PostResponses200ContentApplicationJsonSchemaMatchesItemContext PostResponses200ContentApplicationJsonSchemaMatchesItemContext(string text = null, int offset = default, int length = default)
        {
            return new PostResponses200ContentApplicationJsonSchemaMatchesItemContext(text, offset, length);
        }

        /// <summary> Initializes a new instance of PostResponses200ContentApplicationJsonSchemaMatchesItemRule. </summary>
        /// <param name="id"> An rule&apos;s identifier that&apos;s unique for this language. </param>
        /// <param name="subId"> An optional sub identifier of the rule, used when several rules are grouped. </param>
        /// <param name="description"></param>
        /// <param name="urls"> An optional array of URLs with a more detailed description of the error. </param>
        /// <param name="issueType"> The &lt;a href=&quot;http://www.w3.org/International/multilingualweb/lt/drafts/its20/its20.html#lqissue-typevalues&quot;&gt;Localization Quality Issue Type&lt;/a&gt;. This is not defined for all languages, in which case it will always be &apos;Uncategorized&apos;. </param>
        /// <param name="category"></param>
        /// <returns> A new <see cref="Models.PostResponses200ContentApplicationJsonSchemaMatchesItemRule"/> instance for mocking. </returns>
        public static PostResponses200ContentApplicationJsonSchemaMatchesItemRule PostResponses200ContentApplicationJsonSchemaMatchesItemRule(string id = null, string subId = null, string description = null, IEnumerable<Post200ApplicationJsonPropertiesItemsRuleUrlsItem> urls = null, string issueType = null, Post200ApplicationJsonPropertiesItemsRuleCategory category = null)
        {
            urls ??= new List<Post200ApplicationJsonPropertiesItemsRuleUrlsItem>();

            return new PostResponses200ContentApplicationJsonSchemaMatchesItemRule(id, subId, description, urls?.ToList(), issueType, category);
        }

        /// <summary> Initializes a new instance of Post200ApplicationJsonPropertiesItemsRuleUrlsItem. </summary>
        /// <param name="value"> the URL. </param>
        /// <returns> A new <see cref="Models.Post200ApplicationJsonPropertiesItemsRuleUrlsItem"/> instance for mocking. </returns>
        public static Post200ApplicationJsonPropertiesItemsRuleUrlsItem Post200ApplicationJsonPropertiesItemsRuleUrlsItem(string value = null)
        {
            return new Post200ApplicationJsonPropertiesItemsRuleUrlsItem(value);
        }

        /// <summary> Initializes a new instance of Post200ApplicationJsonPropertiesItemsRuleCategory. </summary>
        /// <param name="id"> A category&apos;s identifier that&apos;s unique for this language. </param>
        /// <param name="name"> A short description of the category. </param>
        /// <returns> A new <see cref="Models.Post200ApplicationJsonPropertiesItemsRuleCategory"/> instance for mocking. </returns>
        public static Post200ApplicationJsonPropertiesItemsRuleCategory Post200ApplicationJsonPropertiesItemsRuleCategory(string id = null, string name = null)
        {
            return new Post200ApplicationJsonPropertiesItemsRuleCategory(id, name);
        }

        /// <summary> Initializes a new instance of Get200ApplicationJsonItemsItem. </summary>
        /// <param name="name"> a language name like &apos;French&apos; or &apos;English (Australia)&apos;. </param>
        /// <param name="code"> a language code like &apos;en&apos;. </param>
        /// <param name="longCode"> a language code like &apos;en-US&apos; or &apos;ca-ES-valencia&apos;. </param>
        /// <returns> A new <see cref="Models.Get200ApplicationJsonItemsItem"/> instance for mocking. </returns>
        public static Get200ApplicationJsonItemsItem Get200ApplicationJsonItemsItem(string name = null, string code = null, string longCode = null)
        {
            return new Get200ApplicationJsonItemsItem(name, code, longCode);
        }

        /// <summary> Initializes a new instance of Paths19M51AqWordsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="words"> array of words. </param>
        /// <returns> A new <see cref="Models.Paths19M51AqWordsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Paths19M51AqWordsGetResponses200ContentApplicationJsonSchema Paths19M51AqWordsGetResponses200ContentApplicationJsonSchema(IEnumerable<string> words = null)
        {
            words ??= new List<string>();

            return new Paths19M51AqWordsGetResponses200ContentApplicationJsonSchema(words?.ToList());
        }

        /// <summary> Initializes a new instance of PathsJ3J268WordsAddPostResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="added"> true if the word has been added. false means the word hasn&apos;t been added because it had been added before. </param>
        /// <returns> A new <see cref="Models.PathsJ3J268WordsAddPostResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsJ3J268WordsAddPostResponses200ContentApplicationJsonSchema PathsJ3J268WordsAddPostResponses200ContentApplicationJsonSchema(bool? added = null)
        {
            return new PathsJ3J268WordsAddPostResponses200ContentApplicationJsonSchema(added);
        }

        /// <summary> Initializes a new instance of PathsWjwd9LWordsDeletePostResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="deleted"> true if the word has been removed. false means the word hasn&apos;t been removed because it was not in the dictionary. </param>
        /// <returns> A new <see cref="Models.PathsWjwd9LWordsDeletePostResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsWjwd9LWordsDeletePostResponses200ContentApplicationJsonSchema PathsWjwd9LWordsDeletePostResponses200ContentApplicationJsonSchema(bool? deleted = null)
        {
            return new PathsWjwd9LWordsDeletePostResponses200ContentApplicationJsonSchema(deleted);
        }
    }
}
