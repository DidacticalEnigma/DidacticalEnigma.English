// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace DidacticalEnigma.English.LanguageTool.Models
{
    public partial class Post200ApplicationJsonPropertiesItemsItem
    {
        internal static Post200ApplicationJsonPropertiesItemsItem DeserializePost200ApplicationJsonPropertiesItemsItem(JsonElement element)
        {
            string message = default;
            Optional<string> shortMessage = default;
            int offset = default;
            int length = default;
            IReadOnlyList<Post200ApplicationJsonPropertiesItemsReplacementsItem> replacements = default;
            PostResponses200ContentApplicationJsonSchemaMatchesItemContext context = default;
            string sentence = default;
            Optional<PostResponses200ContentApplicationJsonSchemaMatchesItemRule> rule = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("message"))
                {
                    message = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("shortMessage"))
                {
                    shortMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("offset"))
                {
                    offset = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("length"))
                {
                    length = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("replacements"))
                {
                    List<Post200ApplicationJsonPropertiesItemsReplacementsItem> array = new List<Post200ApplicationJsonPropertiesItemsReplacementsItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Post200ApplicationJsonPropertiesItemsReplacementsItem.DeserializePost200ApplicationJsonPropertiesItemsReplacementsItem(item));
                    }
                    replacements = array;
                    continue;
                }
                if (property.NameEquals("context"))
                {
                    context = PostResponses200ContentApplicationJsonSchemaMatchesItemContext.DeserializePostResponses200ContentApplicationJsonSchemaMatchesItemContext(property.Value);
                    continue;
                }
                if (property.NameEquals("sentence"))
                {
                    sentence = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rule"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rule = PostResponses200ContentApplicationJsonSchemaMatchesItemRule.DeserializePostResponses200ContentApplicationJsonSchemaMatchesItemRule(property.Value);
                    continue;
                }
            }
            return new Post200ApplicationJsonPropertiesItemsItem(message, shortMessage.Value, offset, length, replacements, context, sentence, rule.Value);
        }
    }
}
